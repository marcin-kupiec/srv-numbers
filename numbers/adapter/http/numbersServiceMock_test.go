// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http

import (
	"context"
	"sync"
)

// Ensure, that numbersServiceMock does implement numbersService.
// If this is not the case, regenerate this file with moq.
var _ numbersService = &numbersServiceMock{}

// numbersServiceMock is a mock implementation of numbersService.
//
//	func TestSomethingThatUsesnumbersService(t *testing.T) {
//
//		// make and configure a mocked numbersService
//		mockednumbersService := &numbersServiceMock{
//			GetFunc: func(ctx context.Context, number int64) (int64, int64, error) {
//				panic("mock out the Get method")
//			},
//		}
//
//		// use mockednumbersService in code that requires numbersService
//		// and then make assertions.
//
//	}
type numbersServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, number int64) (int64, int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Number is the number argument value.
			Number int64
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *numbersServiceMock) Get(ctx context.Context, number int64) (int64, int64, error) {
	if mock.GetFunc == nil {
		panic("numbersServiceMock.GetFunc: method is nil but numbersService.Get was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Number int64
	}{
		Ctx:    ctx,
		Number: number,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, number)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockednumbersService.GetCalls())
func (mock *numbersServiceMock) GetCalls() []struct {
	Ctx    context.Context
	Number int64
} {
	var calls []struct {
		Ctx    context.Context
		Number int64
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
